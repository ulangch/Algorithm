一、分治法

    1）基本思想
      分治法的设计思想是：
        将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。
      分治策略是：
        对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其分解为k个规模较小的子问题，
      这些子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问题的解合并得到原问题的解。这种算法设计策略叫做分治法。

    2）可使用分治法求解的一些经典问题
        二分搜索，大整数乘法，Strassen矩阵乘法，棋盘覆盖，合并排序，快速排序，线性时间选择，最接近点对问题，循环赛日程表，汉诺塔

二、分支界限法

    1）类似于回溯法，也是一种在问题的解空间树T上搜索问题解的算法。但在一般情况下，分支限界法与回溯法的求解目标不同。
    回溯法的求解目标是找出T中满足约束条件的所有解，而分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束
    条件的解中找出使某一目标函数值达到极大或极小的解，即在某种意义下的最优解。

    2）回溯法和分支限界法的一些区别
      有一些问题其实无论用回溯法还是分支限界法都可以得到很好的解决，但是另外一些则不然。也许我们需要具体一些的分析——到底何时使用
      分支限界而何时使用回溯呢？

三、回溯法

    1）基本思想
      在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含
      问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。（其实回溯法就是对隐式图的深度优先搜索算法）。

四、贪心算法

    1）贪心算法的基本思路
      1.建立数学模型来描述问题。
      2.把求解的问题分成若干个子问题。
      3.对每一子问题求解，得到子问题的局部最优解。
      4.把子问题的解局部最优解合成原来解问题的一个解。

    2）贪心算法的实现框架
      从问题的某一初始解出发；
      while （能朝给定总目标前进一步）
         利用可行的决策，求出可行解的一个解元素；
      }
      由所有解元素组合成问题的一个可行解；

    3）贪心策略的选择
      因为用贪心算法只能通过解局部最优解的策略来达到全局最优解，因此，一定要注意判断问题是否适合采用贪心算法策略，找到的解是否一定是问题的最优解。

五、动态规划法

    1）基本思想
      基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。
      在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。

由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。

与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）。

    2）适用的情况
     能采用动态规划求解的问题的一般要具有3个性质：
     1、 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。
     2、无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。
     3、有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）